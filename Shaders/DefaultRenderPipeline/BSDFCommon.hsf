void GetTangentBasis(out float3 T, out float3 B, const float3 N)
{
    float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    T = normalize(cross(up, N));
    B = normalize(cross(N, T));
}

float3 TangentToWorld(const float3 vec, const float3 T, const float3 B, const float3 N)
{
    return normalize(T * vec.x + B * vec.y + N * vec.z);
}

/* @see http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html */
float RadicalInverse_VdC(uint bits)
{
  bits = (bits << 16u) | (bits >> 16u);
  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
  /* Same as dividing by 0x100000000. */
  return float(bits) * 2.3283064365386963e-10;
}

float2 Hammersley2D(uint index, uint samples)
{
    return float2(float(index) / float(samples), RadicalInverse_VdC(index));
}

// float2 Hammersley2D(uint index, uint numSamples)
// {
//     uint bits = (index << 16u) | (index >> 16u);
//     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
//     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
//     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
//     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
//     const float radicalInverse_VdC = float(bits) * 2.3283064365386963e-10;
//     return float2(float(index) / float(numSamples), radicalInverse_VdC);
// }

float3 HemisphereSampleUniform(float2 Xi)
{
    float phi = Xi.y * 2.0 * PI;
    float cosTheta = 1.0 - Xi.x;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    return float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
}

float3 ImportanceSampleGGX(float2 Xi, float roughness)
{
    float alpha = roughness * roughness;
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha*alpha - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    float3 H = float3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);
    return H;
}

float GeometrySchlicksmithGGX(float NdotL, float NdotV, float roughness)
{
    float k = (roughness * roughness) / 2.0;
    float GL = NdotL / (NdotL * (1.0 - k) + k);
    float GV = NdotV / (NdotV * (1.0 - k) + k);
    return GL * GV;
}

float D_GGX(float NdotH, float roughness)
{
    float alpha = roughness * roughness;
    float alphaSquare = alpha * alpha;
    float denom = (NdotH * NdotH) * (alphaSquare - 1.0) + 1.0;
    return alphaSquare / (PI * denom * denom);
}

float3 FresnelSchlick(float3 F0, float cosTheta)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float3 FresnelSchlickRoughness(float3 F0, float cosTheta, float roughness)
{
    return F0 + (max(1.0 - roughness, F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

float GSub(float cosTheta, float k)
{
    return cosTheta / (cosTheta * (1.0 - k) + k);
}

float SchlickGGX(float NdotL, float NdotV, float roughness)
{
    float r = roughness + 1.0;
    // Epic suggests using this roughness remapping for analytic lights.
    float k = (r * r) / 8.0;
    return GSub(NdotL, k) * GSub(NdotV, k);
}

// struct PrincipledBSDF
// {
//     float3 baseColor;
//     float3 subsurfaceColor;
//     float3 subsurfaceRadius;
//     float subsurfaceIOR;
//     float subsurfaceAnisotropy;
//     float subsurface;
//     float metallic;
//     float specular;
//     float roughness;
//     float specularTint;
//     float anisotropic;
//     float anisotropicRotation;
//     float sheen;
//     float sheenTint;
//     float clearcoat;
//     float clearcoatRoughness;
//     float IOR;
//     float transmission;
//     float transmissionRoughness;
//     float3 normal;
//     float3 clearcoatNormal;
//     float3 tangent;
//     float surfaceMixWeight;
//     uint microfacetDistribution;
//     uint subsurfaceMethod;
//     float3 emission;
//     float emissionStrength;
//     float alpha;
// }

// struct Closure
// {
// #ifdef VOLUMETRICS
//   float3 absorption;
//   float3 scatter;
//   float3 emission;
//   float anisotropy;

// #else /* SURFACE */
//   float3 radiance;
//   float3 transmittance;
//   float holdout;
//   vec4 ssr_data;
//   float2 ssr_normal;
//   int flag;
// #  ifdef USE_SSS
//   float3 sss_irradiance;
//   float3 sss_albedo;
//   float sss_radius;
// #  endif

// #endif
// };

// float3 diffuse_dominant_dir(float3 bent_normal)
// {
//   return bent_normal;
// }

// float3 specular_dominant_dir(float3 N, float3 V, float roughness)
// {
//   float3 R = -reflect(V, N);
//   float smoothness = 1.0 - roughness;
//   float fac = smoothness * (sqrt(smoothness) + roughness);
//   return normalize(mix(N, R, fac));
// }

// float ior_from_f0(float f0)
// {
//   float f = sqrt(f0);
//   return (-f - 1.0) / (f - 1.0);
// }

// /* Simplified form of F_eta(eta, 1.0). */
// float f0_from_ior(float eta)
// {
//   float A = (eta - 1.0) / (eta + 1.0);
//   return A * A;
// }

// float3 refraction_dominant_dir(float3 N, float3 V, float roughness, float ior)
// {
//   /* TODO: This a bad approximation. Better approximation should fit
//    * the refracted vector and roughness into the best prefiltered reflection
//    * lobe. */
//   /* Correct the IOR for ior < 1.0 to not see the abrupt delimitation or the TIR */
//   ior = (ior < 1.0) ? mix(ior, 1.0, roughness) : ior;
//   float eta = 1.0 / ior;

//   float NV = dot(N, -V);

//   /* Custom Refraction. */
//   float k = 1.0 - eta * eta * (1.0 - NV * NV);
//   k = max(0.0, k); /* Only this changes. */
//   float3 R = eta * -V - (eta * NV + sqrt(k)) * N;

//   return R;
// }

// /* Fresnel monochromatic, perfect mirror */
// float F_eta(float eta, float cos_theta)
// {
//   /* compute fresnel reflectance without explicitly computing
//    * the refracted direction */
//   float c = abs(cos_theta);
//   float g = eta * eta - 1.0 + c * c;
//   if (g > 0.0) {
//     g = sqrt(g);
//     float A = (g - c) / (g + c);
//     float B = (c * (g + c) - 1.0) / (c * (g - c) + 1.0);
//     return 0.5 * A * A * (1.0 + B * B);
//   }
//   /* Total internal reflections. */
//   return 1.0;
// }

// /* Fresnel color blend base on fresnel factor */
// float3 F_color_blend(float eta, float fresnel, float3 f0_color)
// {
//   float f0 = f0_from_ior(eta);
//   float fac = saturate((fresnel - f0) / (1.0 - f0));
//   return mix(f0_color, float3(1.0), fac);
// }

// /* Fresnel split-sum approximation. */
// float3 F_brdf_single_scatter(float3 f0, float3 f90, float2 lut)
// {
//   /* Unreal specular matching : if specular color is below 2% intensity,
//    * treat as shadowning */
//   return lut.y * f90 + lut.x * f0;
// }

// /* Multi-scattering brdf approximation from :
//  * "A Multiple-Scattering Microfacet Model for Real-Time Image-based Lighting"
//  * by Carmelo J. Fdez-Agçœ‰era. */
// float3 F_brdf_multi_scatter(float3 f0, float3 f90, float2 lut)
// {
//   float3 FssEss = lut.y * f90 + lut.x * f0;

//   float Ess = lut.x + lut.y;
//   float Ems = 1.0 - Ess;
//   float3 Favg = f0 + (1.0 - f0) / 21.0;
//   float3 Fms = FssEss * Favg / (1.0 - (1.0 - Ess) * Favg);
//   /* We don't do anything special for diffuse surfaces because the principle bsdf
//    * does not care about energy conservation of the specular layer for dielectrics. */
//   return FssEss + Fms * Ems;
// }

// /* GGX */
// float D_ggx_opti(float NH, float a2)
// {
//   float tmp = (NH * a2 - NH) * NH + 1.0;
//   return M_PI * tmp * tmp; /* Doing RCP and mul a2 at the end */
// }

// float G1_Smith_GGX_opti(float NX, float a2)
// {
//   /* Using Brian Karis approach and refactoring by NX/NX
//    * this way the (2*NL)*(2*NV) in G = G1(V) * G1(L) gets canceled by the brdf denominator 4*NL*NV
//    * Rcp is done on the whole G later
//    * Note that this is not convenient for the transmission formula */
//   return NX + sqrt(NX * (NX - NX * a2) + a2);
//   /* return 2 / (1 + sqrt(1 + a2 * (1 - NX*NX) / (NX*NX) ) ); /* Reference function */
// }

// float bsdf_ggx(float3 N, float3 L, float3 V, float roughness)
// {
//   float a = roughness;
//   float a2 = a * a;

//   float3 H = normalize(L + V);
//   float NH = max(dot(N, H), 1e-8);
//   float NL = max(dot(N, L), 1e-8);
//   float NV = max(dot(N, V), 1e-8);

//   float G = G1_Smith_GGX_opti(NV, a2) * G1_Smith_GGX_opti(NL, a2); /* Doing RCP at the end */
//   float D = D_ggx_opti(NH, a2);

//   /* Denominator is canceled by G1_Smith */
//   /* bsdf = D * G / (4.0 * NL * NV); /* Reference function */
//   return NL * a2 / (D * G); /* NL to Fit cycles Equation : line. 345 in bsdf_microfacet.h */
// }

// void accumulate_light(float3 light, float fac, inout vec4 accum)
// {
//   accum += vec4(light, 1.0) * min(fac, (1.0 - accum.a));
// }

// /* Same thing as Cycles without the comments to make it shorter. */
// float3 ensure_valid_reflection(float3 Ng, float3 I, float3 N)
// {
//   float3 R = -reflect(I, N);

//   /* Reflection rays may always be at least as shallow as the incoming ray. */
//   float threshold = min(0.9 * dot(Ng, I), 0.025);
//   if (dot(Ng, R) >= threshold) {
//     return N;
//   }

//   float NdotNg = dot(N, Ng);
//   float3 X = normalize(N - NdotNg * Ng);

//   float Ix = dot(I, X), Iz = dot(I, Ng);
//   float Ix2 = sqr(Ix), Iz2 = sqr(Iz);
//   float a = Ix2 + Iz2;

//   float b = sqrt(Ix2 * (a - sqr(threshold)));
//   float c = Iz * threshold + a;

//   float fac = 0.5 / a;
//   float N1_z2 = fac * (b + c), N2_z2 = fac * (-b + c);
//   bool valid1 = (N1_z2 > 1e-5) && (N1_z2 <= (1.0 + 1e-5));
//   bool valid2 = (N2_z2 > 1e-5) && (N2_z2 <= (1.0 + 1e-5));

//   float2 N_new;
//   if (valid1 && valid2) {
//     /* If both are possible, do the expensive reflection-based check. */
//     float2 N1 = float2(safe_sqrt(1.0 - N1_z2), safe_sqrt(N1_z2));
//     float2 N2 = float2(safe_sqrt(1.0 - N2_z2), safe_sqrt(N2_z2));

//     float R1 = 2.0 * (N1.x * Ix + N1.y * Iz) * N1.y - Iz;
//     float R2 = 2.0 * (N2.x * Ix + N2.y * Iz) * N2.y - Iz;

//     valid1 = (R1 >= 1e-5);
//     valid2 = (R2 >= 1e-5);
//     if (valid1 && valid2) {
//       N_new = (R1 < R2) ? N1 : N2;
//     }
//     else {
//       N_new = (R1 > R2) ? N1 : N2;
//     }
//   }
//   else if (valid1 || valid2) {
//     float Nz2 = valid1 ? N1_z2 : N2_z2;
//     N_new = float2(safe_sqrt(1.0 - Nz2), safe_sqrt(Nz2));
//   }
//   else {
//     return Ng;
//   }
//   return N_new.x * X + N_new.y * Ng;
// }

// /* ----------- Cone angle Approximation --------- */

// /* Return a fitted cone angle given the input roughness */
// float cone_cosine(float r)
// {
//   /* Using phong gloss
//    * roughness = sqrt(2/(gloss+2)) */
//   float gloss = -2 + 2 / (r * r);
//   /* Drobot 2014 in GPUPro5 */
//   // return cos(2.0 * sqrt(2.0 / (gloss + 2)));
//   /* Uludag 2014 in GPUPro5 */
//   // return pow(0.244, 1 / (gloss + 1));
//   /* Jimenez 2016 in Practical Realtime Strategies for Accurate Indirect Occlusion. */
//   return exp2(-3.32193 * r * r);
// }

// float pdf_ggx_reflect(float NH, float NV, float VH, float alpha)
// {
//   float a2 = sqr(alpha);
// #if USE_VISIBLE_NORMAL
//   float D = a2 / D_ggx_opti(NH, a2);
//   float G1 = NV * 2.0 / G1_Smith_GGX_opti(NV, a2);
//   return G1 * VH * D / NV;
// #else
//   return NH * a2 / D_ggx_opti(NH, a2);
// #endif
// }

// float3 sample_ggx(float3 rand, float alpha, float3 Vt)
// {
// #if USE_VISIBLE_NORMAL
//   /* From:
//    * "A Simpler and Exact Sampling Routine for the GGXDistribution of Visible Normals"
//    * by Eric Heitz.
//    * http://jcgt.org/published/0007/04/01/slides.pdf
//    * View vector is expected to be in tangent space. */

//   /* Stretch view. */
//   float3 Th, Bh, Vh = normalize(float3(alpha * Vt.xy, Vt.z));
//   make_orthonormal_basis(Vh, Th, Bh);
//   /* Sample point with polar coordinates (r, phi). */
//   float r = sqrt(rand.x);
//   float x = r * rand.y;
//   float y = r * rand.z;
//   float s = 0.5 * (1.0 + Vh.z);
//   y = (1.0 - s) * sqrt(1.0 - x * x) + s * y;
//   float z = sqrt(saturate(1.0 - x * x - y * y));
//   /* Compute normal. */
//   float3 Hh = x * Th + y * Bh + z * Vh;
//   /* Unstretch. */
//   float3 Ht = normalize(float3(alpha * Hh.xy, saturate(Hh.z)));
//   /* Microfacet Normal. */
//   return Ht;
// #else
//   /* Theta is the cone angle. */
//   float z = sqrt((1.0 - rand.x) / (1.0 + sqr(alpha) * rand.x - rand.x)); /* cos theta */
//   float r = sqrt(max(0.0, 1.0 - z * z));                                 /* sin theta */
//   float x = r * rand.y;
//   float y = r * rand.z;
//   /* Microfacet Normal */
//   return float3(x, y, z);
// #endif
// }

// float3 sample_ggx(float3 rand, float alpha, float3 V, float3 N, float3 T, float3 B, out float pdf)
// {
//   float3 Vt = world_to_tangent(V, N, T, B);
//   float3 Ht = sample_ggx(rand, alpha, Vt);
//   float NH = saturate(Ht.z);
//   float NV = saturate(Vt.z);
//   float VH = saturate(dot(Vt, Ht));
//   pdf = pdf_ggx_reflect(NH, NV, VH, alpha);
//   return tangent_to_world(Ht, N, T, B);
// }

// /** \} */

// /* -------------------------------------------------------------------- */
// /** \name Uniform Hemisphere
//  * \{ */

// float pdf_uniform_hemisphere()
// {
//   return 0.5 * M_1_PI;
// }

// float3 sample_uniform_hemisphere(float3 rand)
// {
//   float z = rand.x;                      /* cos theta */
//   float r = sqrt(max(0.0, 1.0 - z * z)); /* sin theta */
//   float x = r * rand.y;
//   float y = r * rand.z;
//   return float3(x, y, z);
// }

// float3 sample_uniform_hemisphere(float3 rand, float3 N, float3 T, float3 B, out float pdf)
// {
//   float3 Ht = sample_uniform_hemisphere(rand);
//   pdf = pdf_uniform_hemisphere();
//   return tangent_to_world(Ht, N, T, B);
// }

// /** \} */

// /* -------------------------------------------------------------------- */
// /** \name Uniform Cone sampling
//  * \{ */

// float3 sample_uniform_cone(float3 rand, float angle)
// {
//   float z = cos(angle * rand.x);         /* cos theta */
//   float r = sqrt(max(0.0, 1.0 - z * z)); /* sin theta */
//   float x = r * rand.y;
//   float y = r * rand.z;
//   return float3(x, y, z);
// }

// float3 sample_uniform_cone(float3 rand, float angle, float3 N, float3 T, float3 B)
// {
//   float3 Ht = sample_uniform_cone(rand, angle);
//   /* TODO: pdf? */
//   return tangent_to_world(Ht, N, T, B);
// }

// /** \} */



// float3 tint_from_color(float3 color)
// {
//     float luminance = dot(color, float3(0.3, 0.6, 0.1));        /* luminance approx. */
//     return (luminance > 0.0) ? color / luminance : float3(1.0); /* normalize lum. to isolate hue+sat */
// }

// float principled_sheen(float NV)
// {
//   float f = 1.0 - NV;
//   /* Empirical approximation (manual curve fitting). Can be refined. */
//   float sheen = f * f * f * 0.077 + f * 0.01 + 0.00026;
//   return sheen;
// }

// CLOSURE_EVAL_FUNCTION_DECLARE_4(node_bsdf_principled, Diffuse, Glossy, Glossy, Refraction)

// void bsdfprincipled(float4 base_color,
//                     float subsurface,
//                     float3 subsurface_radius,
//                     float4 subsurface_color,
//                     float subsurface_ior,
//                     float subsurface_anisotropy,
//                     float metallic,
//                     float specular,
//                     float specular_tint,
//                     float roughness,
//                     float anisotropic,
//                     float anisotropic_rotation,
//                     float sheen,
//                     float sheen_tint,
//                     float clearcoat,
//                     float clearcoat_roughness,
//                     float ior,
//                     float transmission,
//                     float transmission_roughness,
//                     float4 emission,
//                     float emission_strength,
//                     float alpha,
//                     float3 N,
//                     float3 CN,
//                     float3 T,
//                     const float do_diffuse,
//                     const float do_clearcoat,
//                     const float do_refraction,
//                     const float do_multiscatter,
//                     float ssr_id,
//                     float sss_id,
//                     float3 sss_scale,
//                     out Closure result)
// {
//     metallic = saturate(metallic);
//     transmission = saturate(transmission);
//     float diffuseWeight = (1.0 - transmission) * (1.0 - metallic);
//     transmission *= (1.0 - metallic);
//     float specularWeight = (1.0 - transmission);
//     clearcoat = max(clearcoat, 0.0);
//     transmissionRoughness = 1.0 - (1.0 - roughness) * (1.0 - transmissionRoughness);
//     specular = max(0.0, specular);

//   CLOSURE_VARS_DECLARE_4(Diffuse, Glossy, Glossy, Refraction);

//   in_Diffuse_0.N = N; /* Normalized during eval. */
//   in_Diffuse_0.albedo = mix(base_color.rgb, subsurface_color.rgb, subsurface);

//   in_Glossy_1.N = N; /* Normalized during eval. */
//   in_Glossy_1.roughness = roughness;

//   in_Glossy_2.N = CN; /* Normalized during eval. */
//   in_Glossy_2.roughness = clearcoat_roughness;

//   in_Refraction_3.N = N; /* Normalized during eval. */
//   in_Refraction_3.roughness = do_multiscatter != 0.0 ? roughness : transmission_roughness;
//   in_Refraction_3.ior = ior;

//   CLOSURE_EVAL_FUNCTION_4(node_bsdf_principled, Diffuse, Glossy, Glossy, Refraction);

//   result = CLOSURE_DEFAULT;

//     /* This will tag the whole eval for optimisation. */
//     if (do_diffuse == 0.0) 
//     {
//         out_Diffuse_0.radiance = float3(0);
//     }
//     if (do_clearcoat == 0.0) 
//     {
//         out_Glossy_2.radiance = float3(0);
//     }
//     if (do_refraction == 0.0) 
//     {
//         out_Refraction_3.radiance = float3(0);
//     }

//   float3 V = cameraVec(worldPosition);

//   /* Glossy_1 will always be evaluated. */
//   float NdotV = dot(in_Glossy_1.N, V);

//   float3 baseColorTint = TintFromColor(baseColor.rgb);

//   float fresnel = (do_multiscatter != 0.0) ?
//                       btdf_lut(NV, in_Glossy_1.roughness, in_Refraction_3.ior).y :
//                       F_eta(in_Refraction_3.ior, NV);

//   {
//     /* Glossy reflections.
//      * Separate Glass reflections and main specular reflections to match Cycles renderpasses. */
//     out_Glossy_1.radiance = closure_mask_ssr_radiance(out_Glossy_1.radiance, ssr_id);

//     float2 split_sum = brdf_lut(NV, roughness);

//     float3 glossy_radiance_final = float3(0.0);
//     if (transmission > 1e-5) 
//     {
//       /* Glass Reflection: Reuse radiance from Glossy1. */
//       float3 out_glass_refl_radiance = out_Glossy_1.radiance;

//       /* Poor approximation since we baked the LUT using a fixed IOR. */
//       float3 f0 = mix(float3(1.0), base_color.rgb, specular_tint);
//       float3 f90 = float3(1);

//       float3 brdf = (do_multiscatter != 0.0) ? F_brdf_multi_scatter(f0, f90, split_sum) :
//                                              F_brdf_single_scatter(f0, f90, split_sum);

//       out_glass_refl_radiance *= brdf;
//       out_glass_refl_radiance = render_pass_glossy_mask(float3(1), out_glass_refl_radiance);
//       out_glass_refl_radiance *= fresnel * transmission;
//       glossy_radiance_final += out_glass_refl_radiance;
//     }
//     if (specular_weight > 1e-5) 
//     {
//       float3 dielectric_f0_color = mix(float3(1.0), base_color_tint, specular_tint);
//       float3 metallic_f0_color = base_color.rgb;
//       float3 f0 = mix((0.08 * specular) * dielectric_f0_color, metallic_f0_color, metallic);
//       /* Cycles does this blending using the microfacet fresnel factor. However, our fresnel
//        * is already baked inside the split sum LUT. We approximate using by modifying the
//        * changing the f90 color directly in a non linear fashion. */
//       float3 f90 = mix(f0, float3(1), fast_sqrt(specular));

//       float3 brdf = (do_multiscatter != 0.0) ? F_brdf_multi_scatter(f0, f90, split_sum) :
//                                              F_brdf_single_scatter(f0, f90, split_sum);

//       out_Glossy_1.radiance *= brdf;
//       out_Glossy_1.radiance = render_pass_glossy_mask(float3(1), out_Glossy_1.radiance);
//       out_Glossy_1.radiance *= specular_weight;
//       glossy_radiance_final += out_Glossy_1.radiance;
//     }

//     closure_load_ssr_data(
//         glossy_radiance_final, in_Glossy_1.roughness, in_Glossy_1.N, ssr_id, result);
//   }

//   if (diffuse_weight > 1e-5) 
//   {
//     /* Mask over all diffuse radiance. */
//     out_Diffuse_0.radiance *= diffuse_weight;

//     /* Sheen Coarse approximation: We reuse the diffuse radiance and just scale it. */
//     float3 sheen_color = mix(float3(1), base_color_tint, sheen_tint);
//     float3 out_sheen_radiance = out_Diffuse_0.radiance * principled_sheen(NV);
//     out_sheen_radiance = render_pass_diffuse_mask(float3(1), out_sheen_radiance);
//     out_sheen_radiance *= sheen * sheen_color;
//     result.radiance += out_sheen_radiance;

//     /* Diffuse / Subsurface. */
//     float scale = avg(sss_scale) * subsurface;
//     closure_load_sss_data(scale, out_Diffuse_0.radiance, in_Diffuse_0.albedo, int(sss_id), result);
//   }

//   if (transmission > 1e-5) 
//   {
//     float btdf = (do_multiscatter != 0.0) ?
//                      1.0 :
//                      btdf_lut(NV, in_Refraction_3.roughness, in_Refraction_3.ior).x;
//     /* TODO(@fclem): This could be going to a transmission render pass instead. */
//     out_Refraction_3.radiance *= btdf;
//     out_Refraction_3.radiance = render_pass_glossy_mask(float3(1), out_Refraction_3.radiance);
//     out_Refraction_3.radiance *= base_color.rgb;
//     /* Simulate 2nd transmission event. */
//     out_Refraction_3.radiance *= (refractionDepth > 0.0) ? base_color.rgb : float3(1);
//     out_Refraction_3.radiance *= (1.0 - fresnel) * transmission;
//     result.radiance += out_Refraction_3.radiance;
//   }

//   if (clearcoat > 1e-5) {
//     float NV = dot(in_Glossy_2.N, V);
//     float2 split_sum = brdf_lut(NV, in_Glossy_2.roughness);
//     float3 brdf = F_brdf_single_scatter(float3(0.04), float3(1.0), split_sum);

//     out_Glossy_2.radiance *= brdf * clearcoat * 0.25;
//     out_Glossy_2.radiance = render_pass_glossy_mask(float3(1), out_Glossy_2.radiance);
//     result.radiance += out_Glossy_2.radiance;
//   }

//   {
//     float3 out_emission_radiance = render_pass_emission_mask(emission.rgb);
//     out_emission_radiance *= emission_strength;
//     result.radiance += out_emission_radiance;
//   }

//   result.transmittance = float3(1.0 - alpha);
//   result.radiance *= alpha;
//   result.ssr_data.rgb *= alpha;
// #  ifdef USE_SSS
//   result.sss_albedo *= alpha;
// #  endif
// }
