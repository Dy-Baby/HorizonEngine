[[vk::binding(0, 0)]]
Texture1D BindlessTexture1Ds[];
[[vk::binding(0, 0)]]
Texture2D BindlessTexture2Ds[];
[[vk::binding(0, 0)]]
Texture3D BindlessTexture3Ds[];
[[vk::binding(0, 0)]]
TextureCube BindlessTextureCubes[];
[[vk::binding(1, 0)]]
SamplerState BindlessSamplerStates[];
[[vk::binding(2, 0)]]
RWTexture1D<float4> BindlessRWTexture1Ds[];
[[vk::binding(2, 0)]]
RWTexture2D<float4> BindlessRWTexture2Ds[];
[[vk::binding(2, 0)]]
RWTexture3D<float4> BindlessRWTexture3Ds[];
[[vk::binding(2, 0)]]
RWTexture1DArray<float4> BindlessRWTexture1DArrays[];
[[vk::binding(2, 0)]]
RWTexture2DArray<float4> BindlessRWTexture2DArrays[];
[[vk::binding(3, 0)]]
ByteAddressBuffer BindlessBuffers[];
[[vk::binding(4, 0)]]
RaytracingAccelerationStructure BindlessASs[];

[[vk::push_constant]] 
struct ShaderArguments
{
    uint indices[16];
    float data[16];
} SHADER_ARGUMENTS;

#define SHADER_ARGUMENTS_INDEX(slot) SHADER_ARGUMENTS.indices[slot]
#define SHADER_ARGUMENTS_DATA(slot) SHADER_ARGUMENTS.data[slot]

#define SAMPLER_LINEAR_CLAMP BindlessSamplerStates[0]
#define SAMPLER_LINEAR_WARP BindlessSamplerStates[1]

#define PI 3.1415926535897932384626433832795f

float Luma(float3 gammaCorrectedColor)
{
    return dot(gammaCorrectedColor, float3(0.299, 0.587, 0.114));
}

float Luminance(float3 linearColor)
{
    return dot(linearColor, float3(0.299, 0.587, 0.114));
}

float Luminance(float4 linearColor)
{
    return Luminance(linearColor.rgb);
}

void GenerateTangentBasis(inout float3 T, inout float3 B, float3 N)
{
    float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    T = normalize(cross(up, N));
    B = normalize(cross(N, T));
}

float3 CalculateTextureCubeUVW(float2 uv, uint faceIndex)
{
    uv = 2.0 * float2(uv.x, 1.0 - uv.y) - 1.0;
    switch (faceIndex)
    {
    case 0: return normalize(float3(  1.0, uv.y, -uv.x)); break;
    case 1: return normalize(float3( -1.0, uv.y,  uv.x)); break;
    case 2: return normalize(float3( uv.x,  1.0, -uv.y)); break;
    case 3: return normalize(float3( uv.x, -1.0,  uv.y)); break;
    case 4: return normalize(float3( uv.x, uv.y,   1.0)); break;
    case 5: return normalize(float3(-uv.x, uv.y,  -1.0)); break;
    default: return 0; break;
    }
}