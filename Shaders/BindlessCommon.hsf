[[vk::binding(0, 0)]]
Texture1D BindlessTexture1Ds[];
[[vk::binding(0, 0)]]
Texture2D BindlessTexture2Ds[];
[[vk::binding(0, 0)]]
Texture3D BindlessTexture3Ds[];
[[vk::binding(0, 0)]]
TextureCube BindlessTextureCubes[];
[[vk::binding(1, 0)]]
SamplerState BindlessSamplerStates[];
[[vk::binding(2, 0)]]
RWTexture1D<float4> BindlessRWTexture1Ds[];
[[vk::binding(2, 0)]]
RWTexture2D<float4> BindlessRWTexture2Ds[];
[[vk::binding(2, 0)]]
RWTexture3D<float4> BindlessRWTexture3Ds[];
[[vk::binding(2, 0)]]
RWTexture1DArray<float4> BindlessRWTexture1DArrays[];
[[vk::binding(2, 0)]]
RWTexture2DArray<float4> BindlessRWTexture2DArrays[];
[[vk::binding(3, 0)]]
ByteAddressBuffer BindlessBuffers[];

[[vk::push_constant]] 
struct ShaderArguments
{
    uint indices[16];
    float data[16];
} SHADER_ARGUMENTS;

#define SHADER_ARGUMENTS_INDEX(slot) SHADER_ARGUMENTS.indices[slot]
#define SHADER_ARGUMENTS_DATA(slot) SHADER_ARGUMENTS.data[slot]

#define SAMPLER_LINEAR_CLAMP BindlessSamplerStates[0]
#define SAMPLER_LINEAR_WARP BindlessSamplerStates[1]

#define PI 3.1415926535897932384626433832795f

float mean(float3 v)
{
	return dot(v, float3(1.0f / 3.0f, 1.0f / 3.0f, 1.0f / 3.0f));
}
