#include "../BindlessCommon.hsf"
#include "../Random.hsf"
#include "HybridRenderPipelineCommon.hsf"

#define RAY_TRACING_SHADOWS_SHADER_PER_FRAME_DATA_SLOT       0
#define RAY_TRACING_SHADOWS_SHADER_TLAS_SLOT                 1
#define RAY_TRACING_SHADOWS_SHADER_DEPTH_BUFFER_SRV_SLOT     2
#define RAY_TRACING_SHADOWS_SHADER_SHADOW_MASK_UAV_SLOT      3

PerFrameData GetPerFrameData()
{
    uint bufferIndex = SHADER_ARGUMENTS_INDEX(RAY_TRACING_SHADOWS_SHADER_PER_FRAME_DATA_SLOT);
    return BindlessBuffers[(bufferIndex >> 16) & 0xffff].Load<PerFrameData>(bufferIndex & 0xffff);
}

RaytracingAccelerationStructure GetTopLevelAS()
{
	return BindlessASs[SHADER_ARGUMENTS_INDEX(RAY_TRACING_SHADOWS_SHADER_TLAS_SLOT)];
}

Texture2D GetDepthBufferSRV()
{
	return BindlessTexture2Ds[SHADER_ARGUMENTS_INDEX(RAY_TRACING_SHADOWS_SHADER_DEPTH_BUFFER_SRV_SLOT)];
}

RWTexture2D<float4> GetShadowMaskUAV()
{
	return BindlessRWTexture2Ds[SHADER_ARGUMENTS_INDEX(RAY_TRACING_SHADOWS_SHADER_SHADOW_MASK_UAV_SLOT)];
}

struct ShadowRayPayload
{
	float visibility;
};

float3 UniformSampleCone(float2 randVal, float cosThetaMax) 
{
    float cosTheta = (1.0 - randVal.x) + randVal.x * cosThetaMax;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    float phi = randVal.y * 2.0 * PI;
    return float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
}

float nextRand(inout uint s)
{
	s = (1664525u * s + 1013904223u);
	return float(s & 0x00FFFFFF) / float(0x01000000);
}

[shader("raygeneration")]
void RayTracingShadowsRayGen()
{
    uint3 launchIndex = DispatchRaysIndex();
    uint3 launchDim = DispatchRaysDimensions();

    PerFrameData perFrameData = GetPerFrameData();
    Texture2D depthBuffer = GetDepthBufferSRV();
    RWTexture2D<float4> shadowMask = GetShadowMaskUAV();
    RaytracingAccelerationStructure topLevelAS = GetTopLevelAS();

    const uint2 pixelCoord = launchIndex.xy;

    // Skip background pixels
    const float depth = depthBuffer[pixelCoord].r;
    if (depth == 1.0)
    {
        shadowMask[pixelCoord] = 0.0;
        return;
    }

    // Reconstruct world position from the depth buffer
    float2 pixelCenter = pixelCoord + 0.5;
    float2 uv = pixelCenter / float2(launchDim.xy);
    float4 clipSpacePosition = float4(uv * 2.0 - 1.0, depth, 1.0);
    clipSpacePosition.y = -clipSpacePosition.y;
    float4 worldSpacePosition = mul(clipSpacePosition, perFrameData.invViewProjectionMatrix);
    worldSpacePosition /= worldSpacePosition.w;

    uint randSeed = InitRand(launchIndex.x + launchIndex.y * launchDim.x, perFrameData.frameIndex);

    float cosThetaMax = 0.999;
    // Generate a random direction based on the cone angle. 
    // @see UniformSampleCone in [pbrt]
    float3 randDirection = UniformSampleCone(float2(nextRand(randSeed), nextRand(randSeed)), cosThetaMax);

    float3 N = float3(-1.0, 0.0, 1.0);
    float3 B = GetPerpendicularVector(N);
    float3 T = cross(B, N);

    // float3 T; float3 B; float3 N = float3(-1.0, 0.0, 1.0);
    // GenerateTangentBasis(T, B, N);

    float3x3 TBN = float3x3(T, B, N);
    randDirection = mul(randDirection, TBN);

    // Prepare a shadow ray.
    RayDesc ray;
    ray.Origin = worldSpacePosition.xyz;
    ray.Direction = randDirection;
    ray.TMin = max(1.0, length(worldSpacePosition.xyz)) * 1e-3;
    ray.TMax = 100000.0;

    uint rayFlags = RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER;

    ShadowRayPayload payload;
    payload.visibility = 0.0;

    TraceRay(
        topLevelAS,
        rayFlags,
        0xff,
        0,
        0,
        0,
        ray,
        payload);

    shadowMask[pixelCoord] = payload.visibility;
}

[shader("miss")]
void RayTracingShadowsMiss(inout ShadowRayPayload payload : SV_RayPayload)
{
    payload.visibility = 1.0;
}