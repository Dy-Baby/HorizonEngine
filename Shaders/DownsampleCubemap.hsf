#include "ShaderCommon.hsf"

#define DOWNSAMPLE_CUBEMAP_SHADER_CUBEMAP_SRV_SLOT               0
#define DOWNSAMPLE_CUBEMAP_SHADER_OUTPUT_CUBEMAP_MIP_UAV_SLOT    1

TextureCube GetCubemapSRV()
{
    return BindlessTextureCubes[SHADER_ARGUMENTS_INDEX(DOWNSAMPLE_CUBEMAP_SHADER_CUBEMAP_SRV_SLOT)];
}

RWTexture2DArray<float4> GetOutputCubemapMipUAV()
{
	return BindlessRWTexture2DArrays[SHADER_ARGUMENTS_INDEX(DOWNSAMPLE_CUBEMAP_SHADER_OUTPUT_CUBEMAP_MIP_UAV_SLOT)];
}

[numthreads(8, 8, 6)]
void DownsampleCubemapCS(uint3 GlobalInvocationID : SV_DispatchThreadID)
{
    RWTexture2DArray<float4> outputCubemapMip = GetOutputCubemapMipUAV();

    uint width, height, faces;
    outputCubemapMip.GetDimensions(width, height, faces);
	if (GlobalInvocationID.x >= width || GlobalInvocationID.y >= height) 
    {
        return;
    }

    uint3 coord = GlobalInvocationID;
    float2 uv = (coord.xy + 0.5) / float2(width, height);
	float3 uvw = CalculateCubemapVector(uv, coord.z);
    uint sourceMipLevel = (uint)SHADER_ARGUMENTS_DATA(0);
    
    TextureCube cubemap = GetCubemapSRV();
	float4 color = cubemap.SampleLevel(SAMPLER_LINEAR_WARP, uvw, sourceMipLevel);

    outputCubemapMip[coord] = color;
}